boxplot(wine[,1:3])
boxplot(wine[,1:6])
wine.scaled <- scale(wine)
d <- dist(wine.scaled)
set.seed(1)
hc <- hclust(d, method = "ward.D2")
plot(hc)
tr1 <- cutree(hc, k = 3)
pc1 <- prcomp(wine.scaled)
plot(pc1$x[,2]~pc1$x[,1], col = c("red", "blue", "green")[as.factor(tr1)])
summary(pc1)
autoplot(pc1, loadings = T, loadings.label = T)
# 3: Random Forest
table(Pima.tr$type)/nrow(Pima.tr)
table(Pima.te$type)/nrow(Pima.te)
set.seed(1)
mat <- Pima.tr[, 1:7]
tsn <- Rtsne(mat, is_distance = F, pca = F, perplexity = 10)
plot(tsn$Y[,2]~tsn$Y[,1], col = c("red", "blue")[as.factor(Pima.tr$type)])
set.seed(1)
rf1 <- randomForest(type~., data = Pima.tr, importance = T)
rf1
rf1$confusion
varImpPlot(rf1)
prd.rf <- predict(rf1, Pima.te)
pred.rf <- predict(rf1, Pima.te)
pred.rf <- predict(rf1, Pima.te)
rf.pred <- predict(rf1, Pima.te)
rf.pred
pred.rf <- prediciton(rf.pred, Pima.te$type)
pred.rf <- prediction(rf.pred, Pima.te$type)
lda.pred$posterior
rf.pred <- predict(rf1, Pima.te)
pred.rf <- prediction(rf.pred, Pima.te$type)
pred.rf <- prediction(as.factor(rf.pred), Pima.te$type)
pred.rf <- prediction(as.matrix(rf.pred), Pima.te$type)
rf.pred <- predict(rf1, Pima.te, type ="votes")
rf.pred <- predict(rf1, Pima.te, type = "vote")
rf.pred
rf.pred <- predict(rf1, Pima.te, type = "prob")
rf.pred
pred.rf <- prediction(rf.pred[,2], Pima.te$type)
plot(performance(pred.rf, "tpr", "fpr"))
performance(pred.rf, "auc")@y.values
lda.pred
lda.pred$posterior
performance(pred.rf, "auc")@y.values
set.seed(1)
lda1 <- lda(type~., data = Pima.tr)
lda.pred <- predict(lda1, Pima.te)
pred.lda <- prediction(lda.pred$posterior[,1], Pima.te$type)
plot(performance(pred.lda, "tpr", "fpr"))
performance(pred.lda, "auc")@y.values
rf.pred <- predict(rf1, Pima.te, type = "prob")
pred.rf <- prediction(rf.pred[,2], Pima.te$type)
plot(performance(pred.rf, "tpr", "fpr"))
performance(pred.rf, "auc")@y.values
pred.rf <- prediction(rf.pred[,1], Pima.te$type)
plot(performance(pred.rf, "tpr", "fpr"))
performance(pred.rf, "auc")@y.values
set.seed(1)
lda1 <- lda(type~., data = Pima.tr)
lda.pred <- predict(lda1, Pima.te)
pred.lda <- prediction(lda.pred$posterior[,2], Pima.te$type)
plot(performance(pred.lda, "tpr", "fpr"))
performance(pred.lda, "auc")@y.values
rf.pred <- predict(rf1, Pima.te, type = "prob")
pred.rf <- prediction(rf.pred[,2], Pima.te$type)
plot(performance(pred.rf, "tpr", "fpr"))
performance(pred.rf, "auc")@y.values
rf.pred <- predict(rf1, Pima.te, type = "vote")
pred.rf <- prediction(rf.pred[,2], Pima.te$type)
plot(performance(pred.rf, "tpr", "fpr"))
performance(pred.rf, "auc")@y.values
boxplot(wine)
summary(wine)
boxplot(wine)
wine.scaled <- scale(wine)
d <- dist(wine.scaled)
set.seed(1)
hc <- hclust(d, method = "ward.D2")
plot(hc)
tr1 <- cutree(hc, k = 3)
pc1 <- prcomp(wine.scaled)
plot(pc1$x[,2]~pc1$x[,1], col = c("red", "blue", "green")[as.factor(tr1)])
summary(pc1)
# 3: Random Forest
table(Pima.tr$type)/nrow(Pima.tr)
table(Pima.te$type)/nrow(Pima.te)
str(Pima.tr)
set.seed(1)
mat <- Pima.tr[, 1:7]
tsn <- Rtsne(mat, is_distance = F, pca = F, perplexity = 10)
plot(tsn$Y[,2]~tsn$Y[,1], col = c("red", "blue")[as.factor(Pima.tr$type)])
rf.pred <- predict(rf1, Pima.te, type = "prob")
pred.rf <- prediction(rf.pred[,2], Pima.te$type)
plot(performance(pred.rf, "tpr", "fpr"))
performance(pred.rf, "auc")@y.values
plot(hc)
boxplot(wine)
hc <- hclust(d, method = "ward.D2")
plot(hc)
tr1 <- cutree(hc, k = 3)
d <- dist(wine)
set.seed(1)
hc <- hclust(d, method = "ward.D2")
plot(hc)
d <- dist(wine.scaled)
set.seed(1)
hc <- hclust(d, method = "ward.D2")
plot(hc)
tr1 <- cutree(hc, k = 3)
pc1 <- prcomp(wine.scaled)
autoplot(pc1, loadings = T, loadings.label = T)
# 3: Random Forest
table(Pima.tr$type)/nrow(Pima.tr)
table(Pima.te$type)/nrow(Pima.te)
str(Pima.tr)
set.seed(1)
mat <- Pima.tr[, 1:7]
tsn <- Rtsne(mat, is_distance = F, pca = F, perplexity = 10)
plot(tsn$Y[,2]~tsn$Y[,1], col = c("red", "blue")[as.factor(Pima.tr$type)])
set.seed(1)
rf1 <- randomForest(type~., data = Pima.tr, importance = T)
rf1
rf1$confusion
varImpPlot(rf1)
set.seed(1)
lda1 <- lda(type~., data = Pima.tr)
lda.pred <- predict(lda1, Pima.te)
pred.lda <- prediction(lda.pred$posterior[,2], Pima.te$type)
plot(performance(pred.lda, "tpr", "fpr"))
performance(pred.lda, "auc")@y.values
rf.pred <- predict(rf1, Pima.te, type = "prob")
pred.rf <- prediction(rf.pred[,2], Pima.te$type)
plot(performance(pred.rf, "tpr", "fpr"))
performance(pred.rf, "auc")@y.values
# load libraries
library(readxl)
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:5, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
grades <- grades[is.na(grades$Noten)==F,]
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
View(grades)
# get american grade
us_scale <- function(x){
if(x==6){c("A", 4)}
else if(x==5.5){c("A-", 3.7)}
else if(x==5){c("B+", 3.3)}
else if(x==4.5){c("B", 3)}
else if(x==4){c("C", 2)}
else{c("F", 0)}
}
values <- sapply(grades$Noten, us_scale)
grades[c("US_Grade", "US_Points")] <- c(values[1, ], values[2, ])
grades$US_Points <- as.numeric(grades$US_Points)
# calculate gpa
grades$GPA <- grades$Credits * grades$US_Points
gpa <- sum(grades$GPA)/sum(grades$Credits)
round(gpa, 2)
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:5, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
grades <- grades[is.na(grades$Noten)==F,]
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
# load libraries
library(readxl)
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:5, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
grades <- grades[is.na(grades$Noten)==F,]
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
View(grades)
# get american grade
us_scale <- function(x){
if(x==6){c("A", 4)}
else if(x==5.5){c("A-", 3.7)}
else if(x==5){c("B+", 3.3)}
else if(x==4.5){c("B", 3)}
else if(x==4){c("C", 2)}
else{c("F", 0)}
}
values <- sapply(grades$Noten, us_scale)
grades[c("US_Grade", "US_Points")] <- c(values[1, ], values[2, ])
grades$US_Points <- as.numeric(grades$US_Points)
# calculate gpa
grades$GPA <- grades$Credits * grades$US_Points
gpa <- sum(grades$GPA)/sum(grades$Credits)
round(gpa, 2)
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:6, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
# load libraries
library(readxl)
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:6, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
View(grades)
grades$Noten[is.na(grades$Noten)]
grades$Noten[is.na(grades$Noten),]
grades[is.na(grades$Noten)]
grades[is.na(grades$Noten),]
fach <- grades$Fach[is.na(grades$Noten)]
fach
grades$Noten[grades$Fach==fach]
grades$Noten[grades$Fach==fach,]
grades$Noten[grades$Fach==fach]
grades$Noten[grades$Fach%in%fach]
grades$Noten[grades$Fach%in%fach]
grades$Noten[grades$Fach%in%fach] <- 4
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
View(grades)
grades$Noten[grades$Fach%in%fach] <- 3.5
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
grades$Noten[grades$Fach%in%fach] <- 3
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
grades$Noten[grades$Fach%in%fach] <- 2.5
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
load libraries
library(readxl)
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:4, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
grades <- grades[is.na(grades$Noten)==F,]
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
# load libraries
library(readxl)
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:4, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
grades <- grades[is.na(grades$Noten)==F,]
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
semesters <- paste0(1:5, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
grades <- grades[is.na(grades$Noten)==F,]
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
# load libraries
library(readxl)
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:4, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
grades <- grades[is.na(grades$Noten)==F,]
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:4, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:4, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
grades <- grades[is.na(grades$Noten)==F,]
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:4, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
grades <- grades[is.na(grades$Noten)==F,]
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
semesters <- paste0(1:5, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
grades <- grades[is.na(grades$Noten)==F,]
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
# load libraries
library(readxl)
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:5, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
grades <- grades[is.na(grades$Noten)==F,]
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
View(grades)
fach <- grades$Fach[is.na(grades$Noten)]
fach
is.na(grades$Noten)
grades
is.na(grades$Noten)
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:6, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
grades <- grades[is.na(grades$Noten)==F,]
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:6, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
is.na(grades$Noten)
grades
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:6, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
grades
is.na(grades)
is.na(grades$Fach)
fach <- is.na(grades$Fach)
fach
fach <- grades$fach[is.na(grades$Noten)]
fach <- grades$Fach[is.na(grades$Noten)]
fach
grades$Noten[grades$Fach%in%fach] <- 5.5
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
grades$Noten[grades$Fach=="BA"]<-6
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
# load libraries
library(readxl)
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:6, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
grades
is.na(grades)
grades$Fach[is.na(grades)]
grades$Fach[is.na(grades$Noten)]
fach <- grades$Fach[is.na(grades$Noten)]
fach
fach[-1]
grades$Noten[grades$Fach%in%fach[-1]] <- 4
grades$Noten[grades$Fach=="BA"] <- 5
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
setwd("C:/Users/joelm/OneDrive/ZHAW/BA18")
# - load libraries
library(skewt)
library(scatterplot3d)
# - load data
path <- dirname(rstudioapi::getSourceEditorContext()$path)
ret <- diff(data$Adj.Close)/data$Adj.Close[-length(data$Adj.Close)]
data <- read.csv(paste0(path, "/data/dow_jones_industrial_average.csV"))
ret.std <- scale(ret)
# - estimate parameters for skewed-t-distribution
df <- seq(1, 20, by = 0.1)
gamma <- seq(-5, 5, by = 0.1)
gamma <- gamma[!gamma %in% 0]
var <- expand.grid(df, gamma)
mle <- function(parma, x){
-sum(log(abs(dskt(x, df = parma[1], gamma = parma[2]))))
}
mse <- function(parma, x){
sim <- rskt(1e6, df = parma[1], gamma = parma[2])
sim <- scale(sim)
probs <- seq(0, 1, by = 0.01)
sum((quantile(x, probs)-quantile(sim, probs))^2)
}
estim.mle <- nlminb(start = c(1, -1), objective = mle, x = ret.std, lower = c(1, -Inf), upper = c(Inf, Inf))
ret.std <- scale(ret)
ret <- diff(data$Adj.Close)/data$Adj.Close[-length(data$Adj.Close)]
# - load data
path <- dirname(rstudioapi::getSourceEditorContext()$path)
data <- read.csv(paste0(path, "/data/dow_jones_industrial_average.csV"))
ret <- diff(data$Adj.Close)/data$Adj.Close[-length(data$Adj.Close)]
ret.std <- scale(ret)
# - estimate parameters for skewed-t-distribution
df <- seq(1, 20, by = 0.1)
gamma <- seq(-5, 5, by = 0.1)
gamma <- gamma[!gamma %in% 0]
var <- expand.grid(df, gamma)
mle <- function(parma, x){
-sum(log(abs(dskt(x, df = parma[1], gamma = parma[2]))))
}
mse <- function(parma, x){
sim <- rskt(1e6, df = parma[1], gamma = parma[2])
sim <- scale(sim)
probs <- seq(0, 1, by = 0.01)
sum((quantile(x, probs)-quantile(sim, probs))^2)
}
estim.mle <- nlminb(start = c(1, -1), objective = mle, x = ret.std, lower = c(1, -Inf), upper = c(Inf, Inf))
estim.mse <- nlminb(start = c(1, -1), objective = mse, x = ret.std, lower = c(1,))
estim.mle
estim.mle$par
estim.mse <- nlminb(start = c(1, -1), objective = mse, x = ret.std, lower = c(1, -Inf), upper = c(Inf, Inf))
estim.mse$par
estim.mse <- optim(par = c(1, -1), fn = mse, x = ret.std)
estim.mse
estim.mse$par
estim.mse <- optim(par = c(1, -1), fn = mse, x = ret.std)
mse <- function(parma, x){
sim <- rskt(1e5, df = parma[1], gamma = parma[2])
sim <- scale(sim)
probs <- seq(0, 1, by = 0.01)
sum((quantile(x, probs)-quantile(sim, probs))^2)
}
estim.mse <- optim(par = c(1, -1), fn = mse, x = ret.std)
library(fitdistr)
library(fitdistrplus)
fitdist(ret.std)
fitdist(ret.std, "norm")
fitdist(ret.std, pnorm)
ret.std
fitdist(ret, "norm")
fitdist(ret.std, "norm")
fitdist(ret.std[,1], "norm")
ret.std[,1]
ret.std[,2]
ret.std[]
ret.std[1]
ret.std[1,]
fitdist(ret.std[,1], "norm")
fitdist(ret.std[,1], "skt")
pskt()
pskt
fitdist(ret.std[,1], "skt")
fitdist(ret.std[,1], "skt", start = c(1, -1))
fitdist(ret.std[,1], "skt", start = list(df = 1, gamma = .1))
fitdist(ret.std[,1], "skt", start = list(df = 1, gamma = -1))
fitdist(ret.std[,1], "skt", start = list(df = 1, gamma = 1))
# - estimate parameters for skewed-t-distribution
df <- seq(1, 20, by = 0.1)
gamma <- seq(-5, 5, by = 0.1)
gamma <- gamma[!gamma %in% 0]
# - estimate parameters for skewed-t-distribution
df <- seq(1, 20, by = 0.1)
gamma <- seq(-5, 5, by = 0.1)
gamma <- gamma[!gamma %in% 0]
var <- expand.grid(df, gamma)
var$mle <- apply(var, 1, FUN = function(x, k = 1){
print(k)
k <- k + 1
sum(log(abs(dskt(ret.std, df = x[1], gamma = x[2]))))
})
mse <- function(parma, x){
sim <- rskt(1e5, df = parma[1], gamma = parma[2])
sim <- scale(sim)
probs <- seq(0, 1, by = 0.01)
sum((quantile(x, probs)-quantile(sim, probs))^2)
}
df <- seq(1, 20, by = 0.1)
gamma <- seq(-5, 5, by = 0.1)
gamma <- gamma[!gamma %in% 0]
var <- expand.grid(df, gamma)
var$mle <- apply(var, 1, FUN = function(x) sum(log(abs(dskt(ret.std, df = x[1], gamma = x[2])))))
var$mse <- apply(var, 1, FUN = function(x){
k <- k + 1
sim <- rskt(1e5, df = x[1], gamma = x[2])
sim <- scale(sim)
probs <- seq(0, 1, by = 0.01)
sum((quantile(ret.std, probs)-quantile(sim, probs))^2)
})
var[var$mle==max(var$mle),]
var[var$mse==min(var$mse),]
# load libraries
library(readxl)
# import grades
path <- "C:/Users/joelm/OneDrive/ZHAW/notenschnitt.xlsx"
semesters <- paste0(1:6, ". Semester")
sheets <- lapply(semesters, function(x) read_excel(path, sheet=x))
grades <- do.call("rbind", sheets)
fach <- grades$Fach[is.na(grades$Noten)]
grades$Noten[grades$Fach%in%fach]
grades$Noten[grades$Fach%in%fach] <- 5
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
grades$Noten[grades$Fach%in%fach] <- 4.5
# calculate swiss scale average
swiss_avg <- (grades$Noten%*%grades$Credits)/(sum(grades$Credits))
round(swiss_avg, 2)
